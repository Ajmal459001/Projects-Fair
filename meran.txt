----------------HTML----------------

code . -->open vscode in terminal
HTML - Hyper Text Markup Language

1. Markup Language : Set of rules used to define a document should contain.
2. HTML : Used to display contents in webpage.
3. HTML documents consist of html elements
    - html elements : <starting-tag>contents</ending-tag>
4. HTML structure
    <html>
        <head>
            <title>Webpage Title</title>
        </head>
        <body>
            Contents to be displayed in webpage
        </body>
    </html>
5. HTML 5 ---> "!"
6. Basic Tags
    - Heading : h1-h6 Tags
    { Non-executing Tag : Ctrl+/ (Comments) }
    - Paragragh : p Tag
    - Bold content : b Tag
    - Italics : em Tag (Emphizie) or i tag
    - Highlight : mark Tag
    - Strike : s Tag
    - Superlative : sup Tag
    - Subscript : sub Tag
    - Links : a Tags (anchor tag)(open in the same tab)
    - To break line : br Tags
    - Ordered list : ol Tag, li Tag
    - Unordered list : ul Tag, li Tag
    - Description list : dl Tag, dt Tag, dd Tag
    - Table : table tag(border), thead tag, tr tag, tbody, td & th tag
    - Image : img tag
    - Video : video tag
    - Embedding content : iFrame tag
    - Container tags(block element)
        - div tag
        - section tag
        - article tag
    - User inputs :
        - form tag
        - user inputs : input tags, radio Button(should group using name attribute to choose only one radio button among multiple radio buttons)
        - Button :
        - Checkbox : using input tag for selecting and deselecting multiple options.
7. Based on display value of tags in browser, We can classify tags
    - Block elements : it use entire width of the browser to display content in browser
        - ex : h1-h6 Tags, p tag, ol, ul, li list tags
    - Inline elements: it use only width of the content to display content in browser
        - ex : a tag, img tag
    

        ----------------CSS----------------

1.CSS : ---Cascading Style Sheet---
    1. Used to provide style html elements
    2. Applying CSS
        - Inline CSS : style attributes
            - syntax : style= "css property: value "
        - Internal css : used to style tags
            - syntax : <style> "css selectors { css property: value} </style>
         - External css : use external css file to define style and link it with html page

    3. selectrors : used to select html elements to a css (used to call entire html content)
        - use tag name
        - use id
        - use class 
        - use universal
        - CSS combinators :
            - Grouping selector (use comma to separate each html elements)
            - descentant selectors : using space(to select parent-child class to style)
            - child selectors : using  (parent)>(child)
            - sibiling selector : using ~ (tilled)
            - immediate sibling selector : using + 
    4. Box models : 
        - Margin : Space between border and browser
        - Padding : Space between border and content
    5. css property :
        - Float property 
        - Position property 
            - Static
            - Fixed
            - relative
            - absolute(overlap one above other and set top 0 and set parent position relative)
            - sticky(should mention when to start ex: top : 0px;)
        - Flex Box : used to dispaly elements in rows and column
            - Flex Container : set dispaly as Flex
                - justify
            - Flex Items
        - Pseudo Classes : A pseudo-class is used to define a special state of an element.
            - Syntax : selector:pseudo-class {property: value;}
        - Grid : used to dispaly elements in rows and column, where user can fix the column width
            - grid Container : display as grid,
                - grid-template-column / row : used to set width of column / row
                - gap : used to set space between row / column
            - grid items : 
        - linear-gradient : is used to set combinations
            - syntax : background-image: linear-gradient(direction, color)
        - Animation : animation property , to define @keyframes
            - Animation Libraries : https://animate.style/
            - aos animation : https://michalsnik.github.io/aos/
            - locomotive scroll :
    6. Website depoly : Web Server
            - Netlify
            - GitHub Pages
            - Vercel
    7. Media Queries : Used to design responsive website
            - Media queries can be used to check many things, such as :
                - width and height of the viewport
                - orientation of the viewport ( landscape & potrait )
                - resolution
            - use @media keyword :
                - syntax : @media not|only mediatype and (media feature) and (media feature) 
                           {
                             CSS-Code;
                           } 
            - Screen breakpoints : 
                - 4080px - sm, 760px - md, 992px - lg, 1200px - xl

----------------Git & GitHub----------------

    1. GIT : used to control version of a code
    2. Git Commands :
    - git status : use to check status of git inside the folder
    - git init: used to create / initiate git repository in the folder
    - git add . : used to track all untracked files to git 
    - git commit -m "message" : used to store / save tracked files to git
    - git remote add origin url-of-github-repo : to initially link github repo with git repo
    - git push origin master : used to push git code to github origin master


---------BOOTSTRAP -  CSS FRAMEWORK----------

    1. Build fast, responsive sites
    2. Predefined class of style, Comman BOOTSTRAP class
        - container / container-fluid :
        - border :
        - color : sucess(green) / danger(red) / warning / primary / info / dark /light / secondary
        - margin : m/mt/mb/me/ms-1/2/3/4/5
        - text-center/start/end
        - padding : p/pt/pb/pe/ps-1/2/3/4/5
        - text-color :
        - image : image-fluid
        - width : w-25/50/75/100
        - fs-1/2/3/4/5
        - fw-bold/bolder
        - button : btn btn-color / btn btn-outline-color (hover)
        - grid :
            - row : maximum divided into 12 equal parts
            - col : 


---------TAILWIND -  CSS FRAMEWORK----------


    1.Rapidly build modern websites without ever leaving your HTML
        
        - Template literals : combine different types of data within a back tick symbol, it uses ${variable_name} to display variables


        - using const keyword : syntax - const variableName = value
        - using let keyword : syntax - let variableName = value
    - Hoisting : moving a variable declaration to the top of the code(var , but not const)
    - Difference b/w different variable in js
             var                                  const                              let
    ------------------------------------------------------------------------------------------------------
    1. use var keyword                  use const keyword                    use let keyword
    2. can reassign its value           cannot reassignits value             can reassign its value  
    3. Global scope                     Block scope                          Block scope
    4. Hoisted with intial value        Hoisted without intial value         Hoisted without intial value
    - Operators in JS
        - Assignment Operators : =
        - Arithmetic Operators : = - * / % **
        - Relational Operators : > >= < <= == === != return boolean
        - Logical Operators : && || !
            &&                  ||                  !
        --------------------------------------------------------
        T && T = T          T || T = T             !T=F
        T && F = F          T || F = T             !F=T
        F && T = F          F || T = T
        F && F = F          F || F = F
        - Increment / Decrement Operators : ++ --
        - Short hand Operators : += -= *=
        - Ternary Operators : condition? when condition become true : when condition become false
        - Truthy Operators : condition && when condition become true : when condition become false
        - Spread Operators : used to Spread an iterating variable to a single array, symbol of Spread is ...
        - REST Operators : used to combine rest of the data to single array, use ... operator
     - Descion Making / Conditional Statements :
        - if Statements : syntax - if(condition) { when condition become true}
        - if-else Statements : syntax - if(condition){ when condition become true} else { when condition become false}
        - else if ladders
        - Switch Statements : syntax - switch(condition){
            case answer1: 
                    Statements
                    break;
            case answer2: 
                    Statements
                    break;        
            default :
                    Statements
          }
     - looping Statements : Used to repeat same task multiple times
        - while loop : syntax -
            1. Intialise a variable 
            2. while(condition using variable)
                {
                    - while loop executes when condition become true
                    3. change the value of the variable used in condition
                }
        - for loop : syntax -
            for(Intialise a variable; condition using variable; change the value of the variable used in condition) {
                for loop body executes when condition become true
            }  
            - break Statements : used to break from a loop execution
            - continue Statements: used to skip loop for certain values in a loop   
        - Nested loop : A loop inside another loop,  
            - outer-loop {
                inner-loop{
                    //inner-loop complete execution first
                }
            }
     - Functions : used to perform a specific task and normal functions are Hoisted
        -Function definition part : define task to be performed
            - syntax : function function_name(arg1,arg2...){
                function body where we can define task to be performed using arguements given to the function
            }
        - Function call : used to execute functionin JS
            - syntax : function_name(para1,para2...)
        - return Statements : used to return the execution from definition to function call along with the value from its definition, and return must define at the end of a function definition
        - Types of functions : 
            - Predefined function : ex - console.log(content) , Number(value)
            - Arrow functions : used as an alternative for a normal function definition
                syntax : var/const/let function_name = (arg1,..arg2)=>{define function body to perform task}
        - Callback Function : a function definition inside another function call
            - syntax : function_name( ()=> function body)
        - Anonymous function / nameless function : are self executing
        - Recursive / repeating function : use to perform a task repeatedly , calling a function inside its own definition 
            - syntax : function_name(){.....function_name()   }
        - Nested Function : defining a function inside another function definition
        - Closure Property : In nested function child function can access its parent data
     - Array : used to store multiple values in a single variable
        - Array Methods 
            - push(value) : insert value to array at its end
            - unshift(value) : insert value to array at its begining
            - pop () : remove value at end of an Array
            - shift () : remove value at begining an Array
            - sort (compareFn) : used to sort existing array element in ascending / descending Order
            - forEach(CallbackFn) : an alternative for for-of loop, to iterate in an array
            - filter(CallbackFn) : return a new array with values satisfying condition applied in the existing array
            - find(CallbackFn) : return a value which satisfying condition applied in the existing array
            - map(CallbackFn) : return a new array with values after applying a mapping function to the existing array
            - reduce(CallbackFn) : return either highest/lowest/total of an an existing array values after applying a reduce function
            - reduceRight(CallbackFn) : return either first highest/lowest/total of an an existing array values after applying a reduce function
            - some(CallbackFn) : return a boolean value which is based on condition applied in the existing array, it return true if atleast one item satisfying the condition
            - every(CallbackFn) : return a boolean value which is based on condition applied in the existing array, it return true if all items satisfying the condition
            - flat(depth) : used to reduced dimension of an existing array to its depth value, if depth is infinity then flat will always return 1 dimensional array
            - includes(array-item) : return boolean based on array value  present in the existing array or not
            - indexOf(array-value) : return index correspondinng to that item otherwise return -1
            - splice(index, delete_count) : return a new array with removed items, it changes the existing by removing/replacing item to be deleted with new one
            - reverse() : return new array with reverse an existing array
            - concat() : return new array to join item with existing array
            - join(separator) : used to return string of array item 
     - String : collection of characters within a single/double quotes
        - string Methods () :
            - substring()
            - slice()
            - toUpperCase()
            - toLowerCase()
            - startswith()
            - endswith()
            - trim()
            - includes()
     - Object : used to store data as key-value pair, to create an object {key1:value1,.....}
        - To access value stored in object 
            - Bracket Notation : object-name["key"]
            - Dot Notation : object-name.key
        - To check a key in present in an object
            - use "in" operator , it return a boolean : Syntax - "key" in object-name
            - hasOwnProperty() object method, object-name.hasOwnProperty("key"), it return a boolean
        - To insert a value in an existing object, using assign operator
            - object-name["key"] = value / object-name.key = value
            - Object.assign(destination,source) (Predefined JS method)
        - To update value in an object : use assign operator
        - Object.keys(object-name) : return an array of all keys stored in an object
        - Object.values(object-name) : return an array of all values stored in an object
        - Object.entries(object-name) : used to convert object to an array
        - delete keyword : To remove property from an object, syntax - delete object-name.key
        - Destructure of an object : use to values of an object without using Bracket/Dot Notation
            - const {key1,key2,...key3} = object-name
     - Exception / Run time errors Handling in JS : use Try-Catch block
     - OOPs : Object Orientated Programming
        - Basic Concepts
            - Class : blueprint of object, can have some properties and functions, use keyword 'Class', functions inside a class is known as Methods, predefined method is 'constructor' is intialising class properties
            - Object : Real world entity, used to access class properties / function outside the class. to create object : new object-name()
            - Reference : 'this' keyword is used to link properties / functions  with its own class
        - Features of OOPs
            - Inheritence : a child can extend properties / methods defined in another class
                - Classical Inheritence : using keyword 'extend'
                - Protoype Inheritence : using keyword '__proto__'
            - Polymorphism : 
            - Abstraction : 
            - Encapsulation : 


        ---------JAVASCRIPT :  FRONTEND---------


    1. Used to provide behaviour to HTML elements
    2. Applying JS to HTML elements
        - Internal JS : js code in script tag
        - External JS : link an external js file using script tag
    3. DOM(Document Object Model) : tree structure using object correspondinng to a web page
    4. DOM methods
        - using tag : document.getElementByTagName("tag")
        - using id : document.getElementById("id")/id
        - using class : document.getElementByClass("Class")
        - using querySelector : document.querySelector("tag/#id/.class")
        - using querySelectorAll : document.querySelector("tag/#id/.class")
    5. Events : Triggered by user action, events occured in HTML elements 
        - Mouse related events : click,drag,drop....
        - Keyboard related events : key press down, key up, key down....
        - Touch related events 
    6. Handling Events in HTML : event = function-call() inside html element, behaviour change must define as a function in js
    7. Access/ update Content of an html element in JS
        - innerHTML / innerText property
    8. Permanent data storage in browser
        data will be stored permanently, data stored as key-value pair. type of both key and value must be 'string', to convert value to string - use JSON.stringify(value), to parse string data to normal type - JSON.parse(value)
            - Local storage : 
                - setItem(key,value) : used to store data to storage
                - getItem(key) : used to get value from storage
                - removeItem(key) : used to delete a value from storage
                - clear() : used to clear storage
            - Session storage : 
    9. Working Browser JS Runtime Environment
        - JavaScript Engine : it handle js execution, convert js code to code understand by browser Engine
            - Call Stack : used to keep track of currently executing functions, make sure each one finishes before moving to next. only one call stack in js engine thats is why it is known as Single Threaded Programming
                - can handle 2 types of Functions   
                    - synchronous function : functions executes without a delay
                    - Asynchronous function : functions executes with delay
                        - Callback Functions : Task Queue (Macro Task Queue) - like setTimeout / user events (click/drag...)
                        - Web APIs : stored in Micro task queue which is a priority queue 
            - Event Loop : It manages flow of the code, ensuring Asynchronous operations & user interaction run smoothly. 
            - Heap : storage for variable & object in JS
    10. Asynchronous function Handling in JS
        - Callback function : Nesting of CallbackFn will leads to Callback hell, that means js wont give any response for this kind of call.
        - Promise : Used to resolve Asynchronous function it will definitely gives you a response, A Promise can resolve in 2 types :
            - resolved state : if Asynchronous function call return a response then that state of promise is known as 'resolved state', to get response from resolved state we have to use 'then method' of promise
            - reject state : if Asynchronous function call return nothing after making the call that state is known as 'reject state', to get response from reject state we have to use 'Catch method' of promise
            - Async-Await Keyboards : To resolve promise much more easier, to avoid Callback from promise, if a function is Asynchronous then only we can use Await insdide the function
                - async keyword : makes a function return a promise
                - Await keyword : makes a function to wait for a promise
    11. API (Application Programming Interface) : used to communicate between Application using internet
        - Types of APIs : Based on different communication
            - REST / SOAP : client-server Application 
            - SOCKET : Web Chatting Application
            - GRAPHQL 
        - API Testing Tools
            - Postman
            - ThunderClient : Vs code extension
    12. URL : Unifrom Resource Locator
        - ex : https://jsonplaceholder.typicode.com/users/1
        - Base URL : https://jsonplaceholder.typicode.com
        - URI : Unifrom Resource Indentifier - ex : users
        - Path Parameters : numbers associated in url
        - ex: https://www.google.com/search?q=yahoo&oq=yahoo&gs_lcrp=EgZjaHJvbWUyBggAEEUYOTIGCAEQRRg5MgYIAhBFGDkyBggDEC4YQNIBCDI1NzZqMGoxqAIAsAIA&sourceid=chrome&ie=UTF-8
        - Query Parameters : are value after a questionMark(?) in url
    13. HTTP (Hyper Text Transfer Protocol) : used to allow Application to make request via internet
        - HTTP request : client Application will make request
             - 2 parts 
                - Header part : to keep secret data
                - Body part : used to hold data(Binary/XML/JSON...) to be transfer from client - server 
        - HTTP Methods : 
            - GET : used to get / read data from an app
            - POST : create / store data
            - PUT : used to update data completely
            - PATCH : used to update data partially
            - DELETE : used to remove data
        - HTTP response : server Application provide response to client
            - To get response status of request, browser is using HTTP Response Status code
                - 1xx : Infromational
                - 2xx : Success
                - 3xx : Redirection 
                - 4xx : Client Error
                - 5xx : Server Error
    14. JSON (JavaScript Object Notation ) : is a data format used to transfer data from Application to other using internet
        - data stored as key-value pair, here 'key' must be always 'string' type
        - ex : "username":"Max Miller", "Age":39
    15. API Call in JS : AJAX(Asynchronous JavaScript And XML) - methods to make API call using js
        - API call using 'XMLHttpRequest' (XHR)
            - XMLHttpRequest Class has predefined function & properties to make sending request & response between Application in internet
                - Object of XMLHttpRequest used to interact with server Application 
                - XMLHttpRequest Class properties
                    - readyState : returns a number which indicate state of a request(1-4), if readyState==4 then request recieves the response
                    - responseText : return a string that contains the response to the request as text 
                    - Status : return response status code of the request 
                - XMLHttpRequest Class methods 
                    - open() : used to Intialise a request 
                    - send() : sends the request
                - Events
                    - onreadyStatechange : event to occur whenever readyState changes  
            - Steps to make API call 
                1. create an object for XMLHttpRequest class
                2. Intialise the request using open method
                3. Send request
        - API call using 'fetch' method
            - fetch() function returns a Promise, then resolved response will get from 'then method' and reject response get from 'catch method' of promise
        - API Call using axios Library : Axios is a promise-based HTTP Client for node.js and the browser.
    16. JAVASCRIPT Modules : used to transfer data from one js file to another 
            - use import / export Statements
                - export Statements : used to share data from one js file to another, can used in 2 types
                    - using export default keyword : this keyword must be at the end of that file
                    - using export keyword : used to export multiple data from a single js file            
                - import Statements : used to use exported data from another js file, we can export data in 2 types
                    - import with curly braces : if data exported using 'export keyword'
                    - import without curly braces : if data exported using 'export default keyword'


---------REACT : Advanced FRONT END Application Library - META (FaceBook) ---------


    1. Basic React 
        - React App is a collection of different Libraries
        - React App is consist of different type of 'components', which is used to display contents in browser, in React app, all the components are arranged in a tree structure. Tree structure has a single parent node which is by default known as 'App component' , components are reusable. 
        - Pure JavaScript functions to built components, it return how to dispaly contents in browser. Pure function are capable of doing only one task with help of its arguements. function without side effects
        - Declarative approach 
        - Virtual DOM : Light weight memory representation of real DOM. 
        - Babel Library : used to dispaly contents in to browser
        - JSX (JavaScript XML) : JS extension for writing html code in JavaScript, used to display content in browser
            - Jsx element : ex: const heading = <h1> Heading </h1>
            - Rules for using JSX
                - Every JSX element must be inside a single tag. Parent tag can be any container tag (div,section,article etc ...) or react fragments ( <></> ) tag without name is known as react fragments. 
                - In JSX we have to use 'camel case' to write content : ex: fontSize
                - Every JSX code must have a closing tag. if a tag has contents then : <startingTag>contents</endingTag> , if a tag doesnot has content : <startingTag></endingTag> or we use self closing tag ( <startingTag/> ) as well
                - Instead of attribute 'Class' use 'className' in JSX
                - Instead of attribute 'for' use 'htmlFor' in JSX
                - In JSX , we can directly pass js code inside a curly braces. ex: {js code}
    2. React App Creation 
        - CRA (using create-react-app command) //execution time delay
        - Vite : tool for building web Application
            - Installing vite globally : npm i -g create-vite
            //npm create vite@latest
            //react 
            //JavaScript 
            - React App Creation using vitr :  
            - to run vite react project : npm run dev
            - to generate build folder to deploy react app using Netlify : npm run build
    3. File & Folder structure of react app using vite
        - package.json file : npm configuration file for the project
        - package-lock.json file : used to hold version of dependent package of the project
        - eslint.config.js file : js configuration file
        - .gitignore file : used to hold file & folder to be ignored while adding to git
        - node_modules folder : used to locally store dependent packages of the project , we generate node_modules folder with the help of command 'npm instal'
        - public folder : used to hold data that can be accessed by any part of the project.
        - index.html file : entry point of react Application, react app will display in index.html file
        - src folder : logic of react app is definded here 
            - main.jsx file : define the logic to render ( displaying in browser ) react app in html element with id as 'root'
                - createRoot() : lets you create a root to display React components inside a browser DOM node.
            - css file : used to define style for all components in react app
            //reconciliation
            - App.jsx file : used to create react root component
            - assets folder : used to hold media files used in react project 
    4. Components : are part of user interface. used to dispaly contents in browser, to create component create a js / jsx file with filename start with capital letter
        - create react components 2 types 
            - Functional based / Stateless  component : uses js Pure function to build component, function name must similar to its filename. function must return jsx code (rafce - react arrow function component export)
            - Class based / state full component : uses class to create component. class inherit react component class. render method in class used to return jsx. (rcc - react class component)
                - to create state. it has to call super method in its constructor to get its parent features. state is an object, where we can store value as key-value pairs, to update the state use a predefined method setState() pass its arguement as updated value of state.
        - Life Cycle Methods of React components
            - Mounting Phase : Putting JSX into DOM
                - constructor()
                - getDerivedStateFromProps()
                - render()
                - componentDidMount()
            - Updating Phase : When component updated
                - getDerivedStateFromProps()
                - shouldComponentUpdate()
                - render()
                - getSnapshotBeforeUpdate()
                - componentDidUpdate()
            - Unmounting Phase : Removing component from DOM
                - componentWillUnmount()
        - Difference class based vs functional based component

            Class Based Components                          Functional Based Components
        ----------------------------------------      ------------------------------------------
        1. using class to create, render method       1. using js pure function and return jsx
        must return jsx
        2. Statefull component                        2. Stateless component
        3. Hooks are not used                         3. Hooks are not used
        4. Need constructor to Intialise state        4. No need of constructor
        5. Life Cycle methods are available           5. Life Cycle methods are not available

    5. Data sharing in React Components 
         - Data can only be shared from parent to child : use 'props' object 
    6. Props : is a property of a component. it is an object used to transfer data from parent component to child component, parent data can be shared via child tag attribute. to access parent data in child we have to props. props used in the child component function arguement. props cannot be changed
    7. Conditional Rendering : used based on condition rendering jsx elements in browser, using if-else Statements (Ternary operator ?:) / if Statements ( && operator )
    8. List in React : use map array method. set key attribute to duplicating JSX element in a list 
    9. CSS styling in react : Different ways to apply css to JSX elements
        - Inline CSS : use style attrribute to apply style to jsx element, style must be as js object
            - syntax : style = {{cssProperty : value,...}}
        - Using External CSS : Define css style in an external css file. Link css file to component file using import Statements. We cannot import css file into a  variable in component file
            - import 'css file path'
        - Using CSS Module file : file with extension as .module.css is known as css 'module file', In this file we have to define style in class. To use module css file we have to import it to component file.
            - import variableName from 'module css file path', to apply in component, variableName.className
        - Important Css Styling Component Libraries
            - Material UI : npm install @mui/material @emotion/react @emotion/styled 
            - React Bootstrap : npm install react-bootstrap bootstrap, Choose bootstrap theme in order apply bootstrap properly in react project, use https://bootswatch.com/ for selecting theme. Download bootstrap.min.css and add that file inside project src folder. Import bootstrap.min.css file in main.jsx file of project.(import './bootstrap.min.css')
            - Tailwind CSS : npm install -D tailwindcss postcss autoprefixer, npx tailwindcss init -p . use the guideline from the link : https://tailwindcss.com/docs/guides/vite
    10. Events Handling in React : syntax - event={function call}
        - Binding function without arguements : event={functionName}
        - Binding function with arguements : event={()=>functionName(argument) }
        - Binding function with arguements : event={(event)=>functionName(event) } 
    11. State in React : used to store data of a component. When state value changes component will re render (reconciliation)
    12. Hooks in React(launched in the version 16 of update) : predefined methods in react is known as hooks. Used to provide react component features to Functional Based component. All hooks names are starts with 'use' keyword. To use a hook in a functional component, it has to call the hook. 
        - Rules to use/call hooks to functional component
            - import hook in component file
            - to use hook in component call the hook in top level of component
            - Hooks cannot be Conditional
        - Based on react features there are different types of hooks are available
            - Built in Hooks    
                - useState(initial-value) hook : used to create state in functional component, this hook will return an array 2 arguements. first arguement will the state, second arguement is a function name generally used to update state. state updating function name must start with 'set'.
                -useEffect(CallbackFn,dependency) hook : used to apply side effects to the functionnal component. we can pass side effects in its first arguement as Callback function, we can also pass an optional dependency arguement to decide when to apply side effects in component
                    - dependency different values
                        - no value : side effects will apply to the component all the time, which leads to an infinite loop.
                        - empty array : side effects will apply to the component only at the time of loading the component in DOM
                        - [state/props/variable_name] : side effects will apply to the component not only at the time of loading of the component in DOM but also whenever the value of state / props /variable_name given in the dependency changes
                -useRef(intial-value) hook : is a React Hook that lets you reference a value that’s not needed for rendering. initial-value is optional in useRef hook, it will return an object with 'current' key
            - Custom Hooks : create js file to define a specific function for a special task. export the function from that file. function name must start with the 'use' keyword
            - useParams() : hook will return dynamic value of route associated with a component
            - useSelector() : hook used to select state from redux store
            - useDispatch() : hook used to dispatch action from a component 
    13. Form Handling in React : there are 2 ways to manage data inside the form by a component 
        - Controlled Components : are component which store form data inside its own state
        - Uncontrolled Components : component who access form data using its DOM elements reference 
        - preventDefault() : is automatically invoked when cancelable attribute value is true, then this function prevent is effect by setting it value as false
    14. Set up Path/url for component in React :use package react-router-dom
        - install react-router-dom : npm i react-router-dom
        - Steps to set up path/url for component
            1. Render the entire react app inside 'BrowserRouter' component of react-router-dom Library, provide this step inside main.jsx file 
            2. Inorder to set up path for component, make sure each component must be inside Routes Component of react-router-dom Library, provide this step inside App.jsx file
            3. To set up path for component use 'Route' component of react-router-dom Library. Route component has attributes like 'path' and 'element' inorder to setup route for component. All route component must be inside Route Component
        - Dynamic Routing : we can setup a dynamic  / changing value in url along : symbol , so react app will understand value with a : is dynamic part of this url.
        - To set up up Page not found url use path as * , its path must be set up at end of all url in react app
    15. Higher Order Components (HOC) : are component whose props arguement will give another component, ex : Route component
    16. API Call in react : 
            - using Axios Library : npm i axios
            - To make Http request using axios : axios(config), axios.httprRequest() method
                - config : is a predefined object  with keys ( method,url,data,headers )
            - Http response using axios will always return object with predefined keys (data(server response),status)
            - Create a services Folder inside src of your react project
    17. Data sharing between components in react :
        - State Lifting : data sharing is using props. We will create a state in common parent of data to be shared components. share state updation function to one component and state to other component



            --------- JSON SERVER CREATION ---------


    1. Create a server folder to store json file 
    2. Create a package.json (npm configuration file) file insdide server folder : use command - npm init -y 
    3. install json-server package in server folder to run json file , use command to install json-server : npm i json-server / to get json-server stable version use command : npm i json-server@0.17.4
    4. Create json (db.json) file for storing project data.
    5. To run json file and available in browser port use command in server folder : npx json-server db.json



            --------- JSON SERVER DEPLOYEMENT USING NODE JS ---------


    1. Create a index.js insdie server folder
    2. Update scripts key of package.json file with { "start" : "node index.js" } and remove test key from it
    3. Creaate .gitignore file, to add node_modules inside it
    4. Define steps to run db.json file using json-server in index.js
        - import json-server 
        - create a sever for media player app in order to run our server app
        - create a middleware to convert json data to js
        - create a port for executing our app
        - set up route / path db.json file so that client can make the request
        - use middleware , route inside the server 
        - run the server using the given port
        - to execute our app we have to use : node index.js in terminal, so that we can see the output in localhost:3000


            --------- REDUX - STATE MANAGEMENT TOOL ---------

    1. A JS library for predictable and maintainable global state management, And to avoid props drilling
    2. Redux consist of 2 packages
        - React-redux : Official React bindings for Redux, npm install react-redux 
        - Redux-Toolkit : The official, opinionated, batteries-included toolset for efficient Redux development, npm install @reduxjs/toolkit
    3. Important API used redux
        - configureStore() : used to create store for redux. 
            - steps to create redux store in react app
                - create a folder redux logic in src folder
                - inside redux folder create a js file for creating redux store, call configureStore method and use reducers to hold the state to be shared / stored in store
            - To provide store to our react app use 'Provider' component of react-redux library. Provider component has 'store' attribute using it we can provide our store to react app. Inorder to do that make Provider component as the root component of our react app. Give these steps in main.jsx file
        - createReducer() : used to create reducers where we can store updated state inside store
        - createAction() : used to create action where we can define logic to updated state , output of action automatically return to reducer
        - createSlice() : used to combine action and reducer in a single file. return action and reducer - it accept initial state, slice name , object of reducers where we can use key as 'action name' and its value as 'reducer function' , reducer function has 2 arguement , first will always initial state of slice, second arguement is an object which contains data from dispatching action
            - steps slice for react app 
                - create js file for defining slice
                - createSlice method call where we have to define reducers as objects , its key act as action and its value act as reducer function it has minimum one arguement which gives slice state 
        - createAsyncThunk() : used to make Asynchronous call in an action in redux. It accept 2 arguements , first is action type string ("slice-name/action-name"), 2nd arguement is a callback function it can return promise. Its output can be 3 different types. pending state / fulfilled state / reject state. 'ExtraReducers' in slice can handle promise return action. Because it has define different cases to update slice state, based on promise output.
    4. Hooks used in Component for managing state using redux
        - useSelector(state=>state.reducer-name) : used to select state from store in a component 
        - useDispatch() : used to execute an action from a component. Hook will return a function that is capable of dispatching an action as its arguement when we call the function
            - action without arguement : dispatch-function(action-name())
            - action with arguement : dispatch-function(action-name(arg1,...)), to access arguement of action in slice reduce function it uses its second arguement which is an object with 2 key payload and type. payload will give the arguement from action dispatched by a component
    5. 
